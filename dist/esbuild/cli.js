#!/usr/bin/env node
"use strict";var q=Object.create;var P=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var U=(n,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of M(t))!L.call(n,r)&&r!==e&&P(n,r,{get:()=>t[r],enumerable:!(s=H(t,r))||s.enumerable});return n};var g=(n,t,e)=>(e=n!=null?q(W(n)):{},U(t||!n||!n.__esModule?P(e,"default",{value:n,enumerable:!0}):e,n));var p=(n,t,e)=>new Promise((s,r)=>{var o=d=>{try{a(e.next(d))}catch(i){r(i)}},c=d=>{try{a(e.throw(d))}catch(i){r(i)}},a=d=>d.done?s(d.value):Promise.resolve(d.value).then(o,c);a((e=e.apply(n,t)).next())});var D=g(require("figlet"));var S={name:"ssv-scanner",version:"1.0.3",description:"Tool for retrieving events data (cluster snapshots and owner nonce) from the SSV network contract.",author:"SSV.Network",repository:"https://github.com/bloxapp/ssv-scanner",license:"MIT",keywords:["ssv","ssv.network","cluster","nonce","scanner"],main:"./dist/tsc/src/main.js",types:"./dist/tsc/src/main.d.ts",bin:{"ssv-keys":"./dist/tsc/src/cli.js"},engines:{node:">=12"},scripts:{"dev:cli":"ts-node src/cli.ts",cli:"node ./dist/tsc/src/cli.js",lint:"eslint src/ --ext .js,.jsx,.ts,.tsx",clean:"rm -rf dist build package","ts-node":"ts-node","copy-json":"cpy './src/shared/abi/*.json' './dist/tsc/src/shared/abi/'",build:"tsc -p tsconfig.json","build-all":"yarn clean && yarn build && yarn copy-json && yarn esbuild",esbuild:"node ./esbuild.js","pre-commit":"yarn test && yarn lint && yarn build-all"},devDependencies:{"@types/argparse":"^2.0.10","@types/cli-progress":"^3.11.0","@types/node":"^15.14.9","cpy-cli":"^5.0.0",esbuild:"^0.14.38","esbuild-node-externals":"^1.4.1",eslint:"^7.32.0","ts-node":"^10.9.1",typescript:"^4.6.4"},dependencies:{"@types/figlet":"^1.5.4",argparse:"^2.0.1","cli-progress":"^3.11.2",figlet:"^1.5.2",web3:"^4.11.1"},licenses:[{MIT:"SEE LICENSE IN LICENCE FILE"}]};var E=g(require("process")),$=require("argparse");var _=require("argparse"),w=class{constructor(t,e){this.name=t;this.description=e;this.env="";this.parser=new _.ArgumentParser({description:this.description}),this.setArguments(this.parser)}parse(t){t.splice(0,1);let e=t.map(r=>(r.endsWith("_stage")&&(this.env="stage",r=r.replace("_stage","")),r)),s=this.parser.parse_args(e);return this.env&&(s.network+=`_${this.env}`),s}};var N=g(require("cli-progress"));var O=g(require("web3")),K={MAINNET:"prod:v4.mainnet",HOLESKY:"prod:v4.holesky",HOLESKY_STAGE:"stage:v4.holesky"},b=class{constructor(t,e){let[s,r]=K[t.toUpperCase()].split(":"),[o,c]=r.split(".");o=o.toUpperCase(),c=c.toUpperCase();let a;try{a=require(`../shared/abi/${s}.${r}.abi.json`)}catch(i){throw console.error(`Failed to load JSON data from ${s}.${r}.abi.json`,i),i}let d;try{d=require(`../shared/abi/${s}.${r}.views.abi.json`)}catch(i){throw console.error(`Failed to load JSON data from ${s}.${r}.views.abi.json`,i),i}if(!a.contractAddress||!a.abi||!a.genesisBlock)throw new Error(`Missing core data in JSON for ${s}.${r}`);if(!d.contractAddress||!d.abi)throw new Error(`Missing views data in JSON for ${s}.${r}`);this.contract={version:o,network:c,address:a.contractAddress,addressViews:d.contractAddress,abi:a.abi,abiViews:d.abi,genesisBlock:a.genesisBlock},this.web3=new O.default(e)}get contractAddress(){return this.contract.address}get abiCore(){return this.contract.abi}get contractCore(){return new this.web3.eth.Contract(this.abiCore,this.contract.address)}get genesisBlock(){return this.contract.genesisBlock}};var T=g(require("web3")),f=class{constructor(t){this.DAY=5400;this.WEEK=this.DAY*7;this.MONTH=this.DAY*30;if(!t.nodeUrl)throw Error("ETH1 node is required");if(!t.network)throw Error("Network is required");if(!t.ownerAddress)throw Error("Cluster owner address is required");if(t.ownerAddress.length!==42)throw Error("Invalid owner address length.");if(!t.ownerAddress.startsWith("0x"))throw Error("Invalid owner address.");this.params=t,this.params.ownerAddress=new T.default().utils.toChecksumAddress(this.params.ownerAddress)}};var V=(n,t)=>{let e=BigInt(t);return n>e?n:e},j=(n,t)=>n<t?n:t;var B=class extends f{constructor(){super(...arguments);this.eventsList=["ValidatorAdded"]}run(e){return p(this,null,function*(){e&&(console.log(`
Scanning blockchain...`),this.progressBar=new N.default.SingleBar({},N.default.Presets.shades_classic));try{let s=yield this._getLatestNonce(e);return e&&this.progressBar.stop(),s}catch(s){throw e&&this.progressBar.stop(),new Error(s)}})}_getLatestNonce(e){return p(this,null,function*(){let s=new b(this.params.network,this.params.nodeUrl),r;try{r=yield s.web3.eth.getBlockNumber()}catch(u){throw new Error("Could not access the provided node endpoint.")}try{yield s.contractCore.methods.owner().call()}catch(u){throw new Error("Could not find any cluster snapshot from the provided contract address.")}let o=this.MONTH,c=0,a=s.genesisBlock,d=s.web3.eth.abi.encodeParameter("address",this.params.ownerAddress),i={fromBlock:BigInt(a),toBlock:r,topics:[null,d]};e&&this.progressBar.start(r,0);do{let u;try{u=(yield s.contractCore.getPastEvents("AllEvents",i)).filter(y=>this.eventsList.includes(y.event)),c+=u.length,i.fromBlock=i.toBlock+BigInt(1)}catch(y){if(o===this.MONTH)o=this.WEEK;else if(o===this.WEEK)o=this.DAY;else throw new Error(y)}i.toBlock=j(i.fromBlock+BigInt(o),r),e&&this.progressBar.update(i.toBlock)}while(i.toBlock-i.fromBlock>0);return e&&this.progressBar.update(r,r),c})}};var v=class extends w{constructor(){super("nonce","Handles nonce operations")}setArguments(t){t.add_argument("-nw","--network",{help:"The network",choices:["mainnet","holesky"],required:!0,dest:"network"}),t.add_argument("-n","--node-url",{help:"ETH1 (execution client) node endpoint url",required:!0,dest:"nodeUrl"}),t.add_argument("-oa","--owner-address",{help:"The cluster owner address (in the SSV contract)",required:!0,dest:"ownerAddress"})}run(t){return p(this,null,function*(){try{let s=yield new B(t).run(!0);console.log("Next Nonce:",s)}catch(e){console.error("\x1B[31m",e.message)}})}};var x=g(require("cli-progress"));var A=class extends f{constructor(){super(...arguments);this.eventsList=["ClusterDeposited","ClusterWithdrawn","ValidatorRemoved","ValidatorAdded","ClusterLiquidated","ClusterReactivated"]}run(e,s){return p(this,null,function*(){if(!(Array.isArray(e)&&this._isValidOperatorIds(e.length)))throw Error("Comma-separated list of operator IDs. The amount must be 3f+1 compatible.");e=[...e].sort((c,a)=>c-a),s&&(console.log(`
Scanning blockchain...`),this.progressBar=new x.default.SingleBar({},x.default.Presets.shades_classic));let o=yield this._getClusterSnapshot(e,s);return s&&this.progressBar.stop(),o})}_getClusterSnapshot(e,s){return p(this,null,function*(){let r,o=new b(this.params.network,this.params.nodeUrl);try{r=yield o.web3.eth.getBlockNumber()}catch(m){throw new Error("Could not access the provided node endpoint: "+m)}try{yield o.contractCore.methods.owner().call()}catch(m){throw new Error("Could not find any cluster snapshot from the provided contract address: "+m)}let c=this.MONTH,a,d=0,i=0,u=o.genesisBlock,y=o.web3.eth.abi.encodeParameter("address",this.params.ownerAddress),h={fromBlock:V(r-BigInt(c),u),toBlock:r,topics:[null,y]};for(s&&this.progressBar.start(r,0);!a&&h.fromBlock>=BigInt(u);){let m;try{m=yield o.contractCore.getPastEvents("allEvents",h),m.filter(l=>this.eventsList.includes(l.event)).filter(l=>JSON.stringify(l.returnValues.operatorIds.map(k=>+k))===JSON.stringify(e)).sort((l,k)=>l.blockNumber-k.blockNumber).forEach(l=>{if(l.blockNumber>=d){let k=d;if(d=l.blockNumber,k===l.blockNumber&&l.transactionIndex<i)return;i=l.transactionIndex,a=l.returnValues.cluster}}),h.toBlock=h.fromBlock}catch(l){console.error(l),c===this.MONTH?c=this.WEEK:c===this.WEEK&&(c=this.DAY)}h.fromBlock=h.toBlock-BigInt(c),s&&this.progressBar.update(r-(h.toBlock-BigInt(c)))}return s&&this.progressBar.update(r,r),a=a||["0","0","0",!0,"0"],{payload:{Owner:this.params.ownerAddress,Operators:e.sort((m,l)=>m-l).join(","),Block:d||r,Data:a.join(",")},cluster:{validatorCount:a[0],networkFeeIndex:a[1],index:a[2],active:a[3],balance:a[4]}}})}_isValidOperatorIds(e){return!(e<4||e>13||e%3!=1)}};var C=class extends w{constructor(){super("cluster","Handles cluster operations")}setArguments(t){t.add_argument("-nw","--network",{help:"The network",choices:["mainnet","holesky"],required:!0,dest:"network"}),t.add_argument("-n","--node-url",{help:"ETH1 (execution client) node endpoint url",required:!0,dest:"nodeUrl"}),t.add_argument("-oa","--owner-address",{help:"The cluster owner address (in the SSV contract)",required:!0,dest:"ownerAddress"}),t.add_argument("-oids","--operator-ids",{help:"Comma-separated list of operators IDs regarding the cluster that you want to query",required:!0,dest:"operatorIds"})}run(t){return p(this,null,function*(){try{let e=t.operatorIds.split(",").map(o=>{if(Number.isNaN(+o))throw new Error("Operator Id should be the number");return+o}).sort((o,c)=>o-c),r=yield new A(t).run(e,!0);console.table(r.payload),console.log("Cluster snapshot:"),console.table(r.cluster),console.log(JSON.stringify({block:r.payload.Block,"cluster snapshot":r.cluster,cluster:Object.values(r.cluster)},null,"  "))}catch(e){console.error("\x1B[31m",e.message)}})}};var Y=n=>p(void 0,null,function*(){return new Promise(t=>{(0,D.default)(n,(e,s)=>{if(e)return t("");t(s)})})});function I(){return p(this,null,function*(){let n=`SSV Scanner v${S.version}`,t=yield Y(n);if(t){console.log(" -----------------------------------------------------------------------------------"),console.log(`${t||n}`),console.log(" -----------------------------------------------------------------------------------");for(let u of String(S.description).match(/.{1,75}/g)||[])console.log(` ${u}`);console.log(` -----------------------------------------------------------------------------------
`)}let e=new $.ArgumentParser,s=e.add_subparsers({title:"commands",dest:"command"}),r=new C,o=new v,c=s.add_parser(r.name,{add_help:!0}),a=s.add_parser(o.name,{add_help:!0}),d="",i=E.argv.slice(2);switch(i[1]&&i[1].includes("--help")?(r.setArguments(c),o.setArguments(a),e.parse_args()):(d=e.parse_known_args()[0].command,r.setArguments(c),o.setArguments(a)),d){case r.name:yield r.run(r.parse(i));break;case o.name:yield o.run(o.parse(i));break;default:console.error("Command not found"),E.exit(1)}})}I();
